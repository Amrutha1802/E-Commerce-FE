{"ast":null,"code":"var _jsxFileName = \"/home/amrutha/Desktop/React/e-commrce-fe day4/src/components/ex.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useQuery } from 'react-query';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchJoke = async () => {\n  const response = await axios.get('http://localhost:4000/products/1');\n  return response.data;\n};\nconst DisplayJokes = () => {\n  _s();\n  const {\n    data,\n    isLoading,\n    isError\n  } = useQuery('joke', fetchJoke);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }, this);\n  }\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error loading joke\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Joke of the Day\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(DisplayJokes, \"MSjTYoPrHxtduNXA41YFDDh1ZTg=\", false, function () {\n  return [useQuery];\n});\n_c = DisplayJokes;\nexport default DisplayJokes;\n\n// // \"Integrate react-query\n\n// // 1. Make a get call using useQuery to https://official-joke-api.appspot.com/random_joke and show jokes on screen.\n// // 2. Make a post call using useMutation from a free REST API service or mock API.\n// // \"\n// import React from 'react'\n// import { useQuery } from 'react-query' \n// //import { QueryClient, QueryClientProvider, Queryclient} from 'react-query'\n// import axios from 'axios';\n\n// //const queryClient=new QueryClient();\n// async function fetchJokes(){\n//     const response= await axios.get('https://official-joke-api.appspot.com/random_joke');\n//     return response;\n//     //return response;\n// }\n// function DisplayJokes() {\n//     const { isLoading,data }=useQuery('joke',\n//         fetchJokes());\n//     ;\n//     if(isLoading){\n//         return <div>Loading...</div>\n//     }\n//     // if(isError){\n//     //     return <div>Error Loading joke</div>\n//     // }\n//     return (\n//         <div>\n//             <h1>Joke of the day</h1>\n//             {/* <p>{data.setup}</p> */}\n//             <p>{data?.data.punchline}</p> \n//             <p>Type:{data?.data.setup}</p>\n//             {/* <p>Type:{data.setup}</p> */}\n//             <p>Type:{data?.data.punchline}</p>\n//         </div>\n//     )\n//     //</QueryClientProvider>\n// }\n\n// export default DisplayJokes;\nvar _c;\n$RefreshReg$(_c, \"DisplayJokes\");","map":{"version":3,"names":["React","useQuery","axios","jsxDEV","_jsxDEV","fetchJoke","response","get","data","DisplayJokes","_s","isLoading","isError","children","fileName","_jsxFileName","lineNumber","columnNumber","id","description","_c","$RefreshReg$"],"sources":["/home/amrutha/Desktop/React/e-commrce-fe day4/src/components/ex.js"],"sourcesContent":["import React from 'react';\nimport { useQuery } from 'react-query';\nimport axios from 'axios';\n\nconst fetchJoke =async () => {\n  const response = await axios.get('http://localhost:4000/products/1');\n  return response.data;\n};\n\nconst DisplayJokes = () => {\n  const { data, isLoading, isError } = useQuery('joke', fetchJoke);\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (isError) {\n    return <div>Error loading joke</div>;\n  }\n\n  return (\n    <div>\n      <h1>Joke of the Day</h1>\n      <p>{data.id}</p>\n      <p>{data.description}</p>\n      {/* {\n                  data.map((item)=>{\n                    return (\n                    <p>{item.id}</p>\n                    );\n                  }\n                )} */}\n      {/* <p>{data.setup}</p>\n      <p>{data.punchline}</p> */}\n    </div>\n  );\n};\n\nexport default DisplayJokes;\n\n// // \"Integrate react-query\n\n// // 1. Make a get call using useQuery to https://official-joke-api.appspot.com/random_joke and show jokes on screen.\n// // 2. Make a post call using useMutation from a free REST API service or mock API.\n// // \"\n// import React from 'react'\n// import { useQuery } from 'react-query' \n// //import { QueryClient, QueryClientProvider, Queryclient} from 'react-query'\n// import axios from 'axios';\n\n// //const queryClient=new QueryClient();\n// async function fetchJokes(){\n//     const response= await axios.get('https://official-joke-api.appspot.com/random_joke');\n//     return response;\n//     //return response;\n// }\n// function DisplayJokes() {\n//     const { isLoading,data }=useQuery('joke',\n//         fetchJokes());\n//     ;\n//     if(isLoading){\n//         return <div>Loading...</div>\n//     }\n//     // if(isError){\n//     //     return <div>Error Loading joke</div>\n//     // }\n//     return (\n//         <div>\n//             <h1>Joke of the day</h1>\n//             {/* <p>{data.setup}</p> */}\n//             <p>{data?.data.punchline}</p> \n//             <p>Type:{data?.data.setup}</p>\n//             {/* <p>Type:{data.setup}</p> */}\n//             <p>Type:{data?.data.punchline}</p>\n//         </div>\n//     )\n//     //</QueryClientProvider>\n// }\n\n// export default DisplayJokes;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAE,MAAAA,CAAA,KAAY;EAC3B,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,kCAAkC,CAAC;EACpE,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEF,IAAI;IAAEG,SAAS;IAAEC;EAAQ,CAAC,GAAGX,QAAQ,CAAC,MAAM,EAAEI,SAAS,CAAC;EAEhE,IAAIM,SAAS,EAAE;IACb,oBAAOP,OAAA;MAAAS,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,IAAIL,OAAO,EAAE;IACX,oBAAOR,OAAA;MAAAS,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACtC;EAEA,oBACEb,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAAS,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBb,OAAA;MAAAS,QAAA,EAAIL,IAAI,CAACU;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBb,OAAA;MAAAS,QAAA,EAAIL,IAAI,CAACW;IAAW;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAUtB,CAAC;AAEV,CAAC;AAACP,EAAA,CA3BID,YAAY;EAAA,QACqBR,QAAQ;AAAA;AAAAmB,EAAA,GADzCX,YAAY;AA6BlB,eAAeA,YAAY;;AAE3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}