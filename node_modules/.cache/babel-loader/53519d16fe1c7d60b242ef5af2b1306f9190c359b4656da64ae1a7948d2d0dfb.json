{"ast":null,"code":"var _jsxFileName = \"/home/amrutha/Desktop/React/e-commrce-fe day4/src/components/ReviewForm.js\";\nimport React, { useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { Formik, Form, ErrorMessage, Field } from 'formik';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport axios from 'axios';\n// import AddReview from './AddReview.js'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  name: '',\n  email: '',\n  rating: '',\n  review: ''\n};\nconst validationSchema = Yup.object({\n  name: Yup.string().required('Name is Required'),\n  email: Yup.string().email('Invalid email Format').required('Email is Required'),\n  rating: Yup.number().required(\"Please give a rating\").min(1, 'Rating value must be greater than 1').max(5, 'Rating value must be less than or equal to 5'),\n  review: Yup.string().required('Review is Required')\n});\nexport default function ReviewForm(props) {\n  // const queryClient = useQueryClient();\n\n  // const addReviewMutation = useMutation(\n  //   // (newReview) => axios.post(`http://localhost:4000/reviewsdata/${id}`, newReview),\n  //   // {\n  //   //   onSuccess: () => {\n  //   //     queryClient.invalidateQueries(['reviews', id]);\n  //   //   }\n  //   // }\n  // );\n  const onSubmit = async (values, {\n    resetForm\n  }) => {\n    console.log('Form values', values);\n    const response = await axios.get(`http://localhost:4000/reviewsdata/${id}`);\n    return response.data;\n    // addReviewMutation.mutate(values, {\n    //   onError: (error) => {\n    //     console.error('Error adding review:', error);\n    //   }\n    // });\n    // axios.get(`http://localhost:4000/reviewsdata/${id}`)\n    // .then(response => {\n    //   const existingData = response.data;\n    //   // Append the new review object to the reviewsofproduct array\n    //   existingData.reviewsofproduct.push(values);\n    //   // Send a POST request to update the data on the server\n    //   axios.post(`http://localhost:4000/reviewsdata/${id}`, existingData)\n    //     .then(response => {\n    //       console.log('Review added successfully:', response.data);\n    //       // Optionally, you can perform additional actions upon successful addition of the review.\n    //     })\n    //     .catch(error => {\n    //       console.error('Error adding review:', error);\n    //     });\n    // })\n    // .catch(error => {\n    //   console.error('Error fetching existing data:', error);\n    // });\n\n    resetForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hii\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: onSubmit,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-comp\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlfor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-comp\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlfor: \"email\",\n            children: \"E-mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"email\",\n            id: \"email\",\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-comp\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlfor: \"rating\",\n            children: \"Rating\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"rating\",\n            name: \"rating\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"rating\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-comp\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlfor: \"review\",\n            children: \"Review\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"review\",\n            name: \"review\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"review\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_c = ReviewForm;\nvar _c;\n$RefreshReg$(_c, \"ReviewForm\");","map":{"version":3,"names":["React","useEffect","Yup","Formik","Form","ErrorMessage","Field","useState","useMutation","useQueryClient","axios","jsxDEV","_jsxDEV","initialValues","name","email","rating","review","validationSchema","object","string","required","number","min","max","ReviewForm","props","onSubmit","values","resetForm","console","log","response","get","id","data","children","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlfor","type","_c","$RefreshReg$"],"sources":["/home/amrutha/Desktop/React/e-commrce-fe day4/src/components/ReviewForm.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport * as Yup from 'yup'\nimport { Formik,Form,ErrorMessage,Field } from 'formik'\nimport { useState } from 'react'\nimport { useMutation,useQueryClient } from 'react-query'\nimport axios from 'axios'\n// import AddReview from './AddReview.js'\n\n\nconst initialValues={\n    name:'',\n    email:'',\n    rating:'',\n    review:''\n}\n\nconst validationSchema=Yup.object({\n    name: Yup.string().required('Name is Required'),\n    email:Yup.string().email('Invalid email Format').required('Email is Required'),\n    rating:Yup.number().required(\"Please give a rating\").min(1,'Rating value must be greater than 1').max(5,'Rating value must be less than or equal to 5'),\n    review:Yup.string().required('Review is Required')\n})\n\nexport default function ReviewForm(props) {\n  // const queryClient = useQueryClient();\n\n  // const addReviewMutation = useMutation(\n  //   // (newReview) => axios.post(`http://localhost:4000/reviewsdata/${id}`, newReview),\n  //   // {\n  //   //   onSuccess: () => {\n  //   //     queryClient.invalidateQueries(['reviews', id]);\n  //   //   }\n  //   // }\n  // );\n    const onSubmit=async (values,{resetForm})=>{\n      console.log('Form values',values);\n      const response = await axios.get(`http://localhost:4000/reviewsdata/${id}`);\n  return response.data;\n      // addReviewMutation.mutate(values, {\n      //   onError: (error) => {\n      //     console.error('Error adding review:', error);\n      //   }\n      // });\n      // axios.get(`http://localhost:4000/reviewsdata/${id}`)\n      // .then(response => {\n      //   const existingData = response.data;\n      //   // Append the new review object to the reviewsofproduct array\n      //   existingData.reviewsofproduct.push(values);\n      //   // Send a POST request to update the data on the server\n      //   axios.post(`http://localhost:4000/reviewsdata/${id}`, existingData)\n      //     .then(response => {\n      //       console.log('Review added successfully:', response.data);\n      //       // Optionally, you can perform additional actions upon successful addition of the review.\n      //     })\n      //     .catch(error => {\n      //       console.error('Error adding review:', error);\n      //     });\n      // })\n      // .catch(error => {\n      //   console.error('Error fetching existing data:', error);\n      // });\n\n      resetForm();\n    }\n  return (\n    <div>\n        <h1>Form</h1>\n        <h1>{props.id}</h1>\n        <h1>hii</h1>\n    <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}>\n        <Form> \n            <div className='form-comp'>\n            <label htmlfor='name'>Name</label>\n            <Field type='text' \n                id='name' \n                name='name'\n            />\n            </div>\n            <ErrorMessage name='name'/>\n            <div className='form-comp'>\n            <label htmlfor='email'>E-mail</label>\n            <Field type='email' \n                id='email' \n                name='email' \n            />\n            </div>\n            <ErrorMessage name='email'/>\n            <div className='form-comp'>\n            <label htmlfor='rating'>Rating</label>\n            <Field type='text' \n                id='rating' \n                name='rating' \n            />\n            </div>\n            <ErrorMessage name='rating'/>\n            <div className='form-comp'>\n            <label htmlfor='review'>Review</label>\n            <Field type='text' \n                id='review' \n                name='review' \n            />\n            </div>\n            <ErrorMessage name='review'/>\n            <button type='submit'>Submit</button>\n            \n        </Form>\n    </Formik>\n    {/* <AddReview/> */}\n    \n    </div>\n  )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}